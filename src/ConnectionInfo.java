/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-20")
public class ConnectionInfo implements org.apache.thrift.TBase<ConnectionInfo, ConnectionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ConnectionInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConnectionInfo");

  private static final org.apache.thrift.protocol.TField NODE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeIp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePort", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConnectionInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConnectionInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String nodeIp; // required
  public int nodePort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_IP((short)1, "nodeIp"),
    NODE_PORT((short)2, "nodePort");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_IP
          return NODE_IP;
        case 2: // NODE_PORT
          return NODE_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODEPORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_IP, new org.apache.thrift.meta_data.FieldMetaData("nodeIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_PORT, new org.apache.thrift.meta_data.FieldMetaData("nodePort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConnectionInfo.class, metaDataMap);
  }

  public ConnectionInfo() {
  }

  public ConnectionInfo(
    java.lang.String nodeIp,
    int nodePort)
  {
    this();
    this.nodeIp = nodeIp;
    this.nodePort = nodePort;
    setNodePortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConnectionInfo(ConnectionInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeIp()) {
      this.nodeIp = other.nodeIp;
    }
    this.nodePort = other.nodePort;
  }

  public ConnectionInfo deepCopy() {
    return new ConnectionInfo(this);
  }

  @Override
  public void clear() {
    this.nodeIp = null;
    setNodePortIsSet(false);
    this.nodePort = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNodeIp() {
    return this.nodeIp;
  }

  public ConnectionInfo setNodeIp(@org.apache.thrift.annotation.Nullable java.lang.String nodeIp) {
    this.nodeIp = nodeIp;
    return this;
  }

  public void unsetNodeIp() {
    this.nodeIp = null;
  }

  /** Returns true if field nodeIp is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeIp() {
    return this.nodeIp != null;
  }

  public void setNodeIpIsSet(boolean value) {
    if (!value) {
      this.nodeIp = null;
    }
  }

  public int getNodePort() {
    return this.nodePort;
  }

  public ConnectionInfo setNodePort(int nodePort) {
    this.nodePort = nodePort;
    setNodePortIsSet(true);
    return this;
  }

  public void unsetNodePort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODEPORT_ISSET_ID);
  }

  /** Returns true if field nodePort is set (has been assigned a value) and false otherwise */
  public boolean isSetNodePort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODEPORT_ISSET_ID);
  }

  public void setNodePortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODEPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NODE_IP:
      if (value == null) {
        unsetNodeIp();
      } else {
        setNodeIp((java.lang.String)value);
      }
      break;

    case NODE_PORT:
      if (value == null) {
        unsetNodePort();
      } else {
        setNodePort((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_IP:
      return getNodeIp();

    case NODE_PORT:
      return getNodePort();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_IP:
      return isSetNodeIp();
    case NODE_PORT:
      return isSetNodePort();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ConnectionInfo)
      return this.equals((ConnectionInfo)that);
    return false;
  }

  public boolean equals(ConnectionInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodeIp = true && this.isSetNodeIp();
    boolean that_present_nodeIp = true && that.isSetNodeIp();
    if (this_present_nodeIp || that_present_nodeIp) {
      if (!(this_present_nodeIp && that_present_nodeIp))
        return false;
      if (!this.nodeIp.equals(that.nodeIp))
        return false;
    }

    boolean this_present_nodePort = true;
    boolean that_present_nodePort = true;
    if (this_present_nodePort || that_present_nodePort) {
      if (!(this_present_nodePort && that_present_nodePort))
        return false;
      if (this.nodePort != that.nodePort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNodeIp()) ? 131071 : 524287);
    if (isSetNodeIp())
      hashCode = hashCode * 8191 + nodeIp.hashCode();

    hashCode = hashCode * 8191 + nodePort;

    return hashCode;
  }

  @Override
  public int compareTo(ConnectionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNodeIp()).compareTo(other.isSetNodeIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeIp, other.nodeIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodePort()).compareTo(other.isSetNodePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePort, other.nodePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ConnectionInfo(");
    boolean first = true;

    sb.append("nodeIp:");
    if (this.nodeIp == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodePort:");
    sb.append(this.nodePort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConnectionInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConnectionInfoStandardScheme getScheme() {
      return new ConnectionInfoStandardScheme();
    }
  }

  private static class ConnectionInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConnectionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConnectionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeIp = iprot.readString();
              struct.setNodeIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodePort = iprot.readI32();
              struct.setNodePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConnectionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeIp != null) {
        oprot.writeFieldBegin(NODE_IP_FIELD_DESC);
        oprot.writeString(struct.nodeIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NODE_PORT_FIELD_DESC);
      oprot.writeI32(struct.nodePort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConnectionInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConnectionInfoTupleScheme getScheme() {
      return new ConnectionInfoTupleScheme();
    }
  }

  private static class ConnectionInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConnectionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConnectionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNodeIp()) {
        optionals.set(0);
      }
      if (struct.isSetNodePort()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNodeIp()) {
        oprot.writeString(struct.nodeIp);
      }
      if (struct.isSetNodePort()) {
        oprot.writeI32(struct.nodePort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConnectionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.nodeIp = iprot.readString();
        struct.setNodeIpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nodePort = iprot.readI32();
        struct.setNodePortIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

